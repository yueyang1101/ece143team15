def treegenerator(region, cleancountryco2):
    """
    @Author Haoyang Ding
    generate a dictionary in a special format
    treedata={"value": co2 emission in a specific region
            "name": region's name
            "children": [{country's name: co2 emission data}, {}....]
            }
    :param region: list of countries' name
    :param cleancountryco2: a dict {"country": co2 emission}
    :return: treedata dictionary
    """
    assert isinstance(region, list)
    assert isinstance(cleancountryco2, dict)

    tempco2 = cleancountryco2.copy()
    treedata = {}
    treedata["value"] = 0
    treedata["name"] = region[0]
    treedata["children"] = []
    for i in region:
        if i in list(tempco2.keys()):
            temp = {}
            temp["name"] = i
            temp["value"] = sum(tempco2[i])
            treedata["value"] += temp["value"]
            treedata["children"].append(temp)
    for i in treedata["children"]:
        i["value"] = i["value"] / treedata["value"]
    return treedata


def treemapdata(africa, asia, europe, na, sa, oceania):
    """
    @Author Haoyang Ding
    generate a txt file
    tree is a list [region1, region2...]
    region: a dictionary in a special format which is generated by treegenerator
    :param: six lists. Each list contains the countries' name in a specific region
    :return: None
    """
    assert isinstance(africa, list)
    assert isinstance(asia, list)
    assert isinstance(europe, list)
    assert isinstance(na, list)
    assert isinstance(sa, list)
    assert isinstance(oceania, list)

    import os
    file_address = os.path.abspath(os.path.join(os.getcwd(), "../../.."))
    co2address = os.path.abspath(os.path.join(file_address, "Data\VisualizationData\CO2_GDP", "cleanglobalco2.txt"))
    f = open(co2address, 'r')
    a = f.read()
    globalco2 = eval(a)
    f.close()

    cleancountryco2 = globalco2.copy()  # 2008-2017 co2 emission data by country
    for i in list(cleancountryco2.keys()):
        temp = cleancountryco2[i]
        templist = list(temp.keys())
        if templist[len(templist) - 1] != 2017.0 or templist[len(templist) - 10] != 2008.0:
            cleancountryco2.pop(i)
        tempvalue = list(temp.values())
        cleancountryco2[i] = tempvalue[-11:-1]

    tree = []
    for i in [africa, asia, europe, na, sa, oceania]:
        tree.append(treegenerator(i, cleancountryco2))

    treeaddress = os.path.abspath(os.path.join(file_address, "Data\VisualizationData\CO2_GDP", "tree.txt"))
    f = open(treeaddress, 'w')
    f.write(str(tree))
    f.close()
